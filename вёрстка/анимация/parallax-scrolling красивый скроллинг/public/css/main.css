* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

:root {
--index: calc(1vh + 1vw);  /* рассчитываем индекс, который учитывает соотношение высоты и ширины. используется для резиновости, например для определения размера шрифта */

/* свойство transition определяет правила анимации изменяемого свойства (в нашем случае transform): время анимации и распределение. Так как мы пользуемся библиотекой ScrollSmoother, которая использует собственный транзишн с кривой безье, мы должны подобрать подходящее распределение для синхронизации наших анимаций */
--transition: transform .75s cubic-bezier(.075, .5, 0, 1);
} 

/* для того чтобы обеспечить работу ScrollSmoother без фризов - используется фишка от автора видео - добавляем для контента   will-change: transform; */
.content {
    will-change: transform;
}

@font-face {
    font-family: raleway_f;
    src: url('../fonts/raleway-regular.woff2');
}

@font-face {
    font-family: raleway-black_f;
    src: url('../fonts/raleway-black.woff2');
    font-weight: 900;
}

body {
    background-color: #010101;
    color: #fff;
    line-height: 2;
    font-family: raleway-regular;
}

.main-header {
    position: relative;
}

.layers {
    /* делаем ширину просмотра на ширину экрана */
    height: 100vh; 
    display: flex;
    align-items: center;
    text-align: center;
    justify-content: center;
    overflow: hidden;  /* убираем прокрутку при переполнении контента */
    position: relative;

    /* чтобы слой был выше надписи */
    z-index: 2;  


    transition: var(--transition);
} 

.layer {
    /* в итоге этого стиля получаем наложенные кадр в кадр картинки, которые будем потом анимировать */
    width: 100%;
    min-height: 100%;
    /* Элемент исчезает с того места, где он должен быть и позиционируется заново. Остальные элементы, располагаются так, как будто этого элемента никогда не было
    Ширина элемента с position: absolute устанавливается по содержимому. 
    Элемент получает display:block, который перекрывает почти все возможные display */
    position: absolute;
    background-size: cover;
    background-position: center;
    transition: transform .75s cubic-bezier(.075, .5, 0, 1);

    /* свойство will-change предоставляет автору возможность уведомить браузер об ожидаемом изменении элемента, таким образом браузер может настроить соответствующую оптимизацию до того как элемент действительно изменится. Такой тип оптимизации может повысить отзывчивость страницы, совершая, возможно дорогие операции до того как они действительно понадобятся. */
    will-change: transform;
}

/* паралакс эффект обеспечивается этими трансформами */
.layer-base {
    /* перемещаем по оси У, которое зависит от переменной-скролла, задающийся динамически через стиль боди.  3d используем из за того что она более оптимизированна чем обычная. на забываем про 3 ось */
    transform: translate3d(0, calc(var(--scrollTop) / 1.6), 0);
    z-index: 0;  /* чтобы слой был на заднем плане */
}

.layer-middle {
    transform: translate3d(0, calc(var(--scrollTop) / 2.5), 0);
    z-index: 2;
}

.layer-front {
    transform: translate3d(0, calc(var(--scrollTop) / 5), 0);
    z-index: 2;
}

.layer-text {
    z-index: 1;
    transform: translate3d(0, calc(var(--scrollTop) / 2), 0);
    font-weight: 900;
    text-transform: uppercase;
    color: #eeeecb;
    text-shadow: 0 0 15px #f0f022;

    will-change: transform;

    transition: var(--transition);
}

.layer-text__title {
    font-size: calc(var(--index) * 1.3);
    letter-spacing: calc(var(--index) / 2);
}

.layer-text__message {
    font-size: calc(var(--index) * 2);
    letter-spacing: calc(var(--index) / 3);
    margin-top: calc(var(--index) * -1);
}

.main-article {
    min-height: 100vh;
    width: 100%;
    position: relative;
    background-size: cover;
    background-position: center;
    display: flex;
    flex-flow: column;
    justify-content: center;
    text-align: center;
    align-items: center;
    top: -1px;
	z-index: 10;
}

.main-article__content {
    width: calc(var(--index) * 23);
    
}

.main-article__title {
    font-size: calc(var(--index) * 2);
    letter-spacing: calc(var(--index) / 3);
    font-weight: 900;
    text-transform: uppercase;
    transform: translate3d(0, calc(var(--scrollTop) / 7), 0);

    transition: var(--transition);
}

.main-article__text{
    transform: translate3d(0, calc(var(--scrollTop) / 7), 0);

    transition: var(--transition);
}

.main-article__copyright {
    position: absolute;
    bottom: calc(var(--index) / 2);
    opacity: 0.75;
    font-size: calc(var(--index) * .75);
    font-size: calc(var(--index) * 1.1);
} 


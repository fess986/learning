// Дана последовательность чисел и запросы вида "определите сколько положительных чисел на отрезке с индексами от L до R".
// Формат ввода
// В первой строке вводится число n (1 ≤ n ≤ 100000) — длина последовательности.
// Во второй строке вводится последовательность из n целых чисел, все числа по модулю не превосходят 100000. Нумерация в последовательности начинается с единицы.
// В первой строке вводится число q (1 ≤ q ≤ 100000) — количество запросов.
// В каждой из следующих q строк вводятся запросы — два индекса l и r (1 ≤ l ≤ r ≤ n)
// Формат вывода
// Для каждого запроса выведите количество положительных на отрезке.
// 5
// 2 -1 2 -2 3
// 4
// 1 1
// 1 3
// 2 4
// 1 5

// output
// 1
// 2
// 1
// 3

// создаем дополнительный массив префиксов, который будет хранить суммы количества положительных элементов по порядку. Далее обращаемся к запрашиваемым границам и узнаем требуемое количкество. Единственный нюанс с левой границей . в лекции его учитывают через дополнительный фиктивный нулевой элемент 0 и обращаются к left-1 , а у меня вариант, который проверяет конкретно этот элемент и плюсует единичку в положительном случае

const sequence = [2, -1, 2, -2, 3];
const n = 5;
let left = 1;
let right = 3;
let answer;

let positiveSequence = [];
let nextValue = 0;

for (let i = 0; i < n; i++) {
  if (sequence[i] > 0) {  // это главное условие метода. Можно проверять что угодно: чётность, кратность и прочие признаки того чего ИЩЕМ
    nextValue = nextValue + 1;
  }
  positiveSequence.push(nextValue);
}
console.log(positiveSequence);

  if (sequence[left - 1] > 0) {
    answer = positiveSequence[right - 1] - positiveSequence[left - 1] + 1
  }
  if (sequence[left - 1] < 0) {
    answer = positiveSequence[right - 1] - positiveSequence[left - 1]
  }

  console.log(answer)
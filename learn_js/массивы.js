const myIntArray = [10, -54, 65, -12, 56, 45];
const myStrArray = ['–º–∞—Å—Å–∏–≤', '—Å–æ—Å—Ç–æ—è—â–∏–π', '–∏–∑', '—Å—Ç—Ä–æ–∫'];
const myMixedArray = ['—Å—Ç—Ä–æ–∫–∞', 15, 34, '–∏ –µ—â–µ –æ–¥–Ω–∞', '"–ü—Ä–∏–≤–µ—Ç!"'];
const myBigArray = [
  ["the universe", 42],
  ["everything", 101010]
];
const newArray = new Array(4).fill("ass"); //—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞ –∏–∑ –¥–ª–∏–Ω–Ω—ã 4, –Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –Ω–µ–º –Ω–µ—Ç. –ü—Ä–∏ —ç—Ç–æ–º —Ñ–∏–ª–ª –ø–æ–∑–≤–æ–ª–∏—Ç –∑–∞–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–∏ –ø–æ–ª—è –Ω—É–∂–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
let removed;


console.log(myIntArray[0]);
console.log(myIntArray[0] + myStrArray[1]);
console.log(myMixedArray[1] = 16); //–º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞—Ç—å –ø–æ –∏–Ω–¥–µ–∫—Å—É –¥–∞–∂–µ –¥–ª—è –º–∞—Å—Å–∏–≤–∞ - –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã.
console.log(myMixedArray[1]); //—É–±–µ–∂–¥–∞–µ–º—Å—è –≤ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
console.log(myBigArray[0][1]);
myBigArray.push([1, 2, 'dahheah']); //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –≤ –∫–æ–Ω–µ—Ü –º–Ω–æ–≥–æ–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
myMixedArray.push('–ø—É—à–∏–º'); //  –î–û–ë–ê–í–õ–ï–ù–ò–ï —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –ö–û–ù–ï–¶ –º–∞—Å—Å–∏–≤–∞
removed = myMixedArray.pop(); //–£–î–ê–õ–Ø–ï–ú –ü–û–°–õ–ï–î–ù–ò–ô —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞
console.log(removed);
myIntArray.shift(); // –£–î–ê–õ–Ø–ï–ú –ü–ï–†–í–´–ô —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞
myIntArray.unshift(11); // –î–û–ë–ê–í–õ–ï–ù–ò–ï —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –ù–ê–ß–ê–õ–û –º–∞—Å—Å–∏–≤–∞

var myArray = []; //–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —á–µ—Ä–µ–∑ —Ü–∏–∫–ª
for (var i = 1; i <= 9; i += 2) {
  myArray.push(i);
}

for (var i = 0; i < myArray.length; i++) { //–ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞
  console.log(myArray[i]);
}

const arr = [ //–ø–µ—Ä–µ–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏–π –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
  [8, 10],
  [13, 44],
  [55, 66]
];
for (var i = 0; i < arr.length; i++) {
  for (var j = 0; j < arr[i].length; j++) {
    console.log(arr[i][j]);
  }
}

arr.length = 0; //–±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± –æ—á–∏—Å—Ç–∏—Ç—å –º–∞—Å—Å–∏–≤. –¥–ª–∏–Ω–Ω—É –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å. –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ–æ–±—Ä–∞—Ç–∏–º—ã–π

//–ü–†–ï–í–†–ê–©–ï–ù–ò–ï –ü–°–ï–í–î–û–ú–ê–°–°–ò–í–ê –í –ú–ê–°–°–ò–í
let arrayLike = {
  0: "Hello",
  1: "World",
  length: 2
};
let arr = Array.from(arrayLike); // (*)
alert(arr.pop()); // World (–º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç)

// –ü–†–ï–í–†–ê–©–ï–ù–ò–ï –ü–°–ï–í–î–û–ú–ê–°–°–ò–í–ê –í –ú–ê–°–°–ò–í
let arrayLike = {
  0: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', // –Ω—É–º–µ—Ä–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0
  1: '–≤—Ç–æ—Ä–Ω–∏–∫',
  2: '—Å—Ä–µ–¥–∞',
  3: '—á–µ—Ç–≤–µ—Ä–≥',
  4: '–ø—è—Ç–Ω–∏—Ü–∞',
  5: '—Å—É–±–±–æ—Ç–∞',
  6: '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
  length: prompt('–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏', ''), // –ø–æ –ø–æ—Ä—è–¥–∫—É , –Ω–∞—á–∏–Ω–∞—è —Å 1
};
let arr = Array.from(arrayLike) // –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π arrayLike –ø—Ä–∏–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ Array.from, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é arr
//alert(arr.pop()); // –µ—Å–ª–∏ length: 1, —Ç–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –µ—Å–ª–∏ 6, —Ç–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
console.log(arr);


// –º–∞—Å—Å–∏–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏
let str = 'ùí≥üòÇ';
// —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ –º–∞—Å—Å–∏–≤ –µ—ë —ç–ª–µ–º–µ–Ω—Ç–æ–≤
let chars = Array.from(str);
alert(chars[0]); // ùí≥
alert(chars[1]); // üòÇ
alert(chars.length); // 2

//–ü–û–ò–°–ö –ó–ù–ê–ß–ï–ù–ò–ô –í –ú–ê–°–°–ò–í–ï. –†–ê–ë–û–¢–ê–ï–¢ –ê–ù–ê–õ–û–ì–ò–ß–ù–û –°–¢–†–û–ö–ê–ú. –°–†–ê–í–ù–ï–ù–ò–ï –ò–î–ï–¢ –°–¢–†–û–ì–û–ï ===
let arr = [1, 0, false];
alert(arr.indexOf(0)); // 1
alert(arr.indexOf(false)); // 2
alert(arr.indexOf(null)); // -1
alert(arr.includes(1)); // true  -  –µ—Å–ª–∏ –Ω–µ –≤–∞–∂–µ–Ω –∏–Ω–¥–µ–∫—Å, —Ç–æ —Å–∞–º—ã–π –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥. —Ç–∞–∫ –∂–µ –æ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–º–µ–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å NaN

// –ü–û–ò–°–ö –í –ú–ê–°–°–ò–í–ï –û–ë–™–ï–ö–¢–û–í. –í–°–¢–†–ï–ß–ê–ï–¢–°–Ø –ß–ê–°–¢–û
//–°–ò–ù–¢–ê–ö–°–ò–°
let result = arr.find(function (item, index, array) {
  // –µ—Å–ª–∏ true - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏ –ø–µ—Ä–µ–±–æ—Ä –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è
  // –µ—Å–ª–∏ –≤—Å–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –æ–∫–∞–∑–∞–ª–∏—Å—å –ª–æ–∂–Ω—ã–º–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è undefined
});
//–ü–†–ò–ú–ï–†
let users = [{
    id: 1,
    name: "–í–∞—Å—è"
  },
  {
    id: 2,
    name: "–ü–µ—Ç—è"
  },
  {
    id: 3,
    name: "–ú–∞—à–∞"
  }
];
let user = users.find(item => item.id == 1);
alert(user.name); // –í–∞—Å—è



myIntArray.forEach((value, index, array) => console.log(value)); // –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–±–æ—Ä–∞ –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –º–∞—Å—Å–∏–≤–∞. –ú–µ—Ç–æ–¥ –í–´–ü–û–õ–ù–Ø–ï–¢ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏. –ü—Ä–∏ —ç—Ç–æ–º –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –Ω–∏—á–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å

//–§–ò–õ–¨–¢–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• –í –ú–ê–°–°–ò–í–ï
let positiveArr = myIntArray.filter(function (number) { //–º–µ—Ç–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –º–∞—Å—Å–∏–≤–µ. —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤. –í–û–ó–í–†–ê–©–ê–ï–¢ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ —É—Å–ª–æ–≤–∏—è
  return number > 0;
});
console.log(positiveArr);


let users = [{
    id: 1,
    name: "–í–∞—Å—è"
  },
  {
    id: 2,
    name: "–ü–µ—Ç—è"
  },
  {
    id: 3,
    name: "–ú–∞—à–∞"
  }
];
// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –¥–≤—É—Ö –ø–µ—Ä–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
let someUsers = users.filter(item => item.id < 3);
alert(someUsers.length); // 2

const nameLengths = myStrArray.map(function (name) { // –ø–æ–ª—É—á–∏–ª–∏ –º–∞—Å—Å–∏–≤ —Å –¥–ª–∏–Ω–∞–º–∏. –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞. –í–û–ó–í–†–ê–©–ê–ï–¢ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
  return name.length;
});
console.log(nameLengths);

//–°–û–†–¢–ò–†–û–í–ö–ê –ú–ê–°–°–ò–í–ê. –ï–°–¢–¨ –û–ë–´–ß–ù–´–ô SORT() - –ù–û –û–ù –°–û–†–¢–ò–†–£–ï–¢ –ú–ê–°–°–ò–í –ü–û –ü–†–ê–í–ò–õ–ê–ú –°–¢–†–û–ö–ò. –î–õ–Ø –¢–û–ì–û –ß–¢–û–ë–´ –ù–ê–£–ß–ò–¢–¨ –°–û–†–¢–ò–†–û–í–ê–¢–¨ –ß–ò–°–õ–ê –ù–£–ñ–ù–û –î–û–ë–ê–í–ò–¢–¨ –§–£–ö–¶–ò–Æ, –ö–û–¢–û–†–ê–Ø –û–ë–™–Ø–°–ù–Ø–ï–¢ –ö–ê–ö –≠–¢–û –î–ï–õ–ê–¢–¨
function compareNumeric(a, b) {
  if (a > b) return 1;
  if (a == b) return 0;
  if (a < b) return -1;
}
let arr = [1, 2, 15];
arr.sort(compareNumeric);
alert(arr); // 1, 2, 15
//–ò–õ–ò –ë–û–õ–ï–ï –ö–û–†–û–¢–ö–ê–Ø –°–¢–†–ï–õ–û–ß–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
arr.sort((a, b) => a - b);

//–ü–ï–†–ï–í–ï–†–ù–£–¢–¨ –ú–ê–°–°–ò–í
let arr = [1, 2, 3, 4, 5];
arr.reverse();
alert(arr); // 5,4,3,2,1
var arr = [1, -1, 2, -2, 3];

// –°–û–ó–î–ê–ù–ò–ï –ú–ê–°–°–ò–í–ê –ò–ó –°–¢–†–û–ö–ò –ü–û –®–ê–ë–õ–û–ù–£
let names = '–í–∞—Å—è, –ü–µ—Ç—è, –ú–∞—à–∞';
let arr = names.split(', ');
for (let name of arr) {
  alert(`–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç: ${name}.`); // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç: –í–∞—Å—è (–∏ –¥—Ä—É–≥–∏–µ –∏–º–µ–Ω–∞)
}
//  –ï–°–¢–¨ –í–¢–û–†–û–ô –ù–ï–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –ü–ê–†–ê–ú–ï–¢–† - –û–ì–†–ê–ù–ò–ß–ò–¢–ï–õ–¨ –ö–û–õ-–í–ê –≠–õ–ï–ú–ï–ù–¢–û–í
let arr = '–í–∞—Å—è, –ü–µ—Ç—è, –ú–∞—à–∞, –°–∞—à–∞'.split(', ', 2);
alert(arr); // –í–∞—Å—è, –ü–µ—Ç—è
// –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—Ä–∞–º–µ—Ç—Ä—ã, —Ç–æ —Ä–∞–∑–±–∏—Ç–∏–µ –ø–æ–±—É–∫–≤–µ–Ω–Ω–æ–µ
let str = "—Ç–µ—Å—Ç";
alert(str.split('')); // —Ç,–µ,—Å,—Ç

//  –û–ë–†–ê–¢–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –°–ë–û–†–ö–ê –°–¢–†–û–ö–ò –ü–û –®–ê–ë–õ–û–ù–£
let arr = ['–í–∞—Å—è', '–ü–µ—Ç—è', '–ú–∞—à–∞'];
let str = arr.join(';'); // –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –º–∞—Å—Å–∏–≤ –≤ —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ ;
alert(str); // –í–∞—Å—è;–ü–µ—Ç—è;–ú–∞—à–∞

//REDUCE –°–ò–ù–¢–ê–ö–°–ò–°
let value = arr.reduce(function (previousValue, item, index, array) {
  // ...
}, [initial]);
// –í–´–ß–ò–°–õ–ï–ù–ò–ï –°–£–ú–ú–´ –≠–õ–ï–ú–ï–ù–¢–û–í
let arr = [1, 2, 3, 4, 5];
let result = arr.reduce((sum, current) => sum + current, 0);
alert(result); // 15

//  –ü–†–û–í–ï–†–ö–ê –ú–ê–°–ò–í –õ–ò –ü–ï–†–ï–î –ù–ê–ú–ò? TYPEOF- –ù–ï –°–†–ê–ë–û–¢–ê–ï–¢–ë –¢–ö –ë–£–î–ï–¢ –í–´–î–ê–í–ê–¢–¨ OBJECT
alert(Array.isArray({})); // false
alert(Array.isArray([])); // true

// –ü–†–û–í–ï–†–ö–ê –ó–ù–ê–ß–ï–ù–ò–ô –ú–ê–°–°–ò–í–ê
function isPositive(number) {
  return number > 0;
}
console.log(arr.every(isPositive)); //—Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±–æ–ª—å—à–µ –Ω—É–ª—è, —Ç–æ –≤–æ–∑–≤—Ä–∞—Ç–∏—Ç —Ç—Ä—É
console.log(arr.some(isPositive)); // //—Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å–ª–∏ –ª—é–±–æ–π —ç–ª–µ–º–µ–Ω—Ç –±–æ–ª—å—à–µ –Ω—É–ª—è, —Ç–æ –≤–æ–∑–≤—Ä–∞—Ç–∏—Ç —Ç—Ä—É

const begin = '–Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏ ';
const result = myStrArray.reduce((accum, world, index, arr) => // –≤ –∞–∫–∫—É–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∫–ª–∞–¥–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π begin , –∞ –∑–∞—Ç–µ–º –ø–µ—Ä–µ–±–∏—Ä–∞—é—Ç—Å—è –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –∏ —Å–∫–ª–µ–∏–≤–∞—é—Ç—Å—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
  {
    let mess = accum + ' ' + world;
    return mess;
  }, begin);
console.log(result);

// –ú–ï–¢–û–î –£–î–ê–õ–ï–ù–ò–Ø –ò –ó–ê–ú–ï–ù–´ –≠–õ–ï–ú–ï–ù–¢–û–í
let arr = ["–Ø", "–∏–∑—É—á–∞—é", "JavaScript"];
arr.splice(1, 1); // –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ–∑–∏—Ü–∏–∏ 1, —É–¥–∞–ª–∏—Ç—å 1 —ç–ª–µ–º–µ–Ω—Ç
console.log(arr);

let arr = ["–Ø", "–∏–∑—É—á–∞—é", "JavaScript", "–ø—Ä—è–º–æ", "—Å–µ–π—á–∞—Å"];
// —É–¥–∞–ª–∏—Ç—å 3 –ø–µ—Ä–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –∑–∞–º–µ–Ω–∏—Ç—å –∏—Ö –¥—Ä—É–≥–∏–º–∏
arr.splice(0, 3, "–î–∞–≤–∞–π", "—Ç–∞–Ω—Ü–µ–≤–∞—Ç—å");
console.log(arr); // —Ç–µ–ø–µ—Ä—å ["–î–∞–≤–∞–π", "—Ç–∞–Ω—Ü–µ–≤–∞—Ç—å", "–ø—Ä—è–º–æ", "—Å–µ–π—á–∞—Å"]

let arr = ["–Ø", "–∏–∑—É—á–∞—é", "JavaScript"];
// —Å –ø–æ–∑–∏—Ü–∏–∏ 2
// —É–¥–∞–ª–∏—Ç—å 0 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
// –≤—Å—Ç–∞–≤–∏—Ç—å "—Å–ª–æ–∂–Ω—ã–π", "—è–∑—ã–∫"
arr.splice(2, 0, "—Å–ª–æ–∂–Ω—ã–π", "—è–∑—ã–∫");
console.log(arr); // "–Ø", "–∏–∑—É—á–∞—é", "—Å–ª–æ–∂–Ω—ã–π", "—è–∑—ã–∫", "JavaScript"

let arr = ["–Ø", "–∏–∑—É—á–∞—é", "JavaScript", "–ø—Ä—è–º–æ", "—Å–µ–π—á–∞—Å"];
// —É–¥–∞–ª–∏—Ç—å 2 –ø–µ—Ä–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞
let removed = arr.splice(0, 2);
console.log(removed); // "–Ø", "–∏–∑—É—á–∞—é" <-- –º–∞—Å—Å–∏–≤ –∏–∑ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
console.log(arr);

//–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
let arr = ["t", "e", "s", "t"];
alert(arr.slice(1, 3)); // e,s (–∫–æ–ø–∏—Ä—É–µ—Ç —Å 1 –¥–æ 3)
alert(arr.slice(-2)); // s,t (–∫–æ–ø–∏—Ä—É–µ—Ç —Å -2 –¥–æ –∫–æ–Ω—Ü–∞)
alert(arr.slice()); // –∫–ª–æ–Ω –º–∞—Å—Å–∏–≤–∞

//—Å–∫–ª–µ–π–∫–∞ –º–∞—Å—Å–∏–≤–æ–≤
let arr = [1, 2];
// —Å–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ –∏–∑: arr –∏ [3,4]
alert(arr.concat([3, 4])); // 1,2,3,4
// —Å–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ –∏–∑: arr –∏ [3,4] –∏ [5,6]
alert(arr.concat([3, 4], [5, 6])); // 1,2,3,4,5,6
// —Å–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ –∏–∑: arr –∏ [3,4], –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è 5 –∏ 6
alert(arr.concat([3, 4], 5, 6)); // 1,2,3,4,5,6

//–æ–±—ä–µ–∫—Ç —Å–∫–ª–µ–∏–≤–∞–∏—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å
let arr = [1, 2];
let arrayLike = {
  0: "—á—Ç–æ-—Ç–æ",
  length: 1
};
alert(arr.concat(arrayLike)); // 1,2,[object Object]

//–Ω–æ –µ—Å–ª–∏ –≤ –æ–±—ä–µ–∫—Ç–µ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª, —Ç–æ –æ–Ω —Å–∫–ª–µ–∏—Ç—Å—è –∫–∞–∫ –º–∞—Å—Å–∏–≤
let arr = [1, 2];
let arrayLike = {
  0: "—á—Ç–æ-—Ç–æ",
  1: "–µ—â—ë",
  [Symbol.isConcatSpreadable]: true,
  length: 2
};
alert(arr.concat(arrayLike)); // 1,2,—á—Ç–æ-—Ç–æ,–µ—â—ë

console.log([] + 1); // "1" . –ú–∞—Å—Å–∏–≤—ã –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–∏
console.log([1] + 1); // "11"
console.log([1, 2] + 1); // "1,21"
console.log(String(arr));

const arr = [];
//arr[0] = prompt('–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ');
let i = 0;
let flag = true;
while (flag) {
  arr[i] = prompt('–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ');
  if (arr[i] == null) {
    flag = false;
    arr.pop();
  }
  i++;
}
console.log(arr);

//–ü–ï–†–ï–ë–û–† –ú–ê–°–°–ò–í–ê
//–ü–û –ò–ù–î–ï–ö–°–ê–ú
let arr = ["–Ø–±–ª–æ–∫–æ", "–ê–ø–µ–ª—å—Å–∏–Ω", "–ì—Ä—É—à–∞"];
for (let i = 0; i < arr.length; i++) {
  alert(arr[i]);
}

//–ü–û –ó–ù–ê–ß–ï–ù–ò–Ø–ú  - –Ω–µ –≤—ã–≤–æ–¥–∏—Ç –Ω–µ —á–∏—Å–ª–µ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞, –Ω–æ –æ–±—ã—á–Ω–æ —ç—Ç–æ –∏ –Ω–µ –Ω—É–∂–Ω–æ. –¥–ª—è –í–°–ï–• –∑–Ω–∞—á–µ–Ω–∏–π for .. in  - –Ω–æ –æ–Ω –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω—ã–π, —Ç–∞–∫ —á—Ç–æ –Ω–µ –∂–µ–ª–∞—Ç–µ–ª–µ–Ω
let fruits = ["–Ø–±–ª–æ–∫–æ", "–ê–ø–µ–ª—å—Å–∏–Ω", "–°–ª–∏–≤–∞"];
for (let fruit of fruits) {
  alert(fruit);
}


//–ó–ê–î–ê–ß–ò –ù–ê –ú–ï–¢–û–î–´ –ú–ê–°–°–ò–í–û–í --------------------------------------------
// –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ú–ê–°–°–ò–í–ê –ü–û –ú–ï–¢–û–î–£ –î–†–£–ì–û–ì–û –ú–ê–°–°–ò–í–ê
let army = {
  minAge: 18,
  maxAge: 27,
  canJoin(user) {
    return user.age >= this.minAge && user.age < this.maxAge;
  }
};
let users = [{
    age: 16
  },
  {
    age: 20
  },
  {
    age: 23
  },
  {
    age: 30
  }
];
// –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö army.canJoin –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true
let soldiers = users.filter(user => army.canJoin(user));
alert(soldiers.length); // 2


// CAMELCASE - –¥–µ—Ñ–∏—Å—ã —É–±–∏—Ä–∞–µ–º, –∞ —Å–ª–µ–¥—É—â—É—é –ø–æ—Å–ª–µ –Ω–µ–µ –±—É–∫–≤—É –¥–µ–ª–∞–µ–º –∑–∞–≥–ª–∞–≤–Ω–æ–π
function camelize(str) {
  let strArray = str.split('');
  strArray.forEach(function (value, index) {
    if (value == '-') {
      strArray.splice(index, 1);
      if (index != strArray.length) {
        strArray.splice(index, 0, strArray[index].toUpperCase());
        strArray.splice(index + 1, 1);
      }
    }
  })
  return strArray.join('');
}
console.log(camelize('background-color-'));

// camelCase - –¥–µ—Ñ–∏—Å—ã —É–±–∏—Ä–∞–µ–º, –∞ —Å–ª–µ–¥—É—â—É—é –ø–æ—Å–ª–µ –Ω–µ–µ –±—É–∫–≤—É –¥–µ–ª–∞–µ–º –∑–∞–≥–ª–∞–≤–Ω–æ–π/ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å —Ä–∞–∑–±–∏—Ç–∏–µ–º –Ω–µ –Ω–∞ –±—É–∫–≤—ã –∞ –Ω–∞ —Å–ª–æ–≤–∞
function camelize(str) {
  return str
    .split('-') // —Ä–∞–∑–±–∏–≤–∞–µ—Ç 'my-long-word' –Ω–∞ –º–∞—Å—Å–∏–≤ ['my', 'long', 'word']
    .map(
      // –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–º –º–∞—Å—Å–∏–≤–∞ –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –ø–µ—Ä–≤–æ–≥–æ
      // –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç ['my', 'long', 'word'] –≤ ['my', 'Long', 'Word']
      (word, index) => index == 0 ? word : word[0].toUpperCase() + word.slice(1)
    )
    .join(''); // —Å–æ–µ–¥–∏–Ω—è–µ—Ç ['my', 'Long', 'Word'] –≤ 'myLongWord'
}
console.log(camelize('-webkit-transition'));

// –∑–∞–¥–∞—á–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤ –º–∞—Å—Å–∏–≤–µ
let arr = [5, 3, 8, 1];
function filterRange(array, min, max) {
  return array.filter(item => (min <= item && item <= max));
};
let filtered = filterRange(arr, 1, 4);
console.log(filtered);
console.log( arr ); // 5,3,8,1 (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)


// —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∑–Ω–∞—á–µ–Ω–∏–π –º–µ–∂–¥—É a –∏ b.
function filterRangeInPlace (array, min, max) {
  array.forEach(function(item,index) {
    if ((item >= min) && (item <= max)) {
      array.splice(index, 1);
    }
  })
}
let arr = [5, 3, 8, 1, -10];
filterRangeInPlace(arr, 1, 4); // —É–¥–∞–ª–µ–Ω—ã —á–∏—Å–ª–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 1..4
alert( arr ); // [3, 1]

// –†–ê–°–®–ò–†–Ø–ï–ú–´–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†
let powerCalc = new Calculator;
powerCalc.addMethod("*", (a, b) => a * b);
powerCalc.addMethod("/", (a, b) => a / b);
powerCalc.addMethod("**", (a, b) => a ** b);

let result = powerCalc.calculate("2 ** 3");
alert( result ); // 8


// –ö–†–£–¢–û–ô –†–ê–°–®–ò–†–Ø–ï–ú–´–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†

function Calculator() {
  // –û–ü–ï–†–ê–¶–ò–ò –•–†–ê–ù–ò–ú –í –û–ë–™–ï–ö–¢–ï –° –ö–õ–Æ–ß–ê–ú–ò-–û–ü–ï–†–ê–¢–û–†–ê–ú–ò –ò –§–£–ù–ö–¶–ò–Ø–ú–ò, –ö–û–¢–û–†–´–ï –û–ù–ò –î–û–õ–ñ–ù–´ –í–´–ü–û–õ–ù–Ø–¢–¨
  this.methods = {
    "-": (a, b) => a - b,
    "+": (a, b) => a + b
  };
// –§–£–ù–ö–¶–ò–Ø –ü–û–î–°–ß–ï–¢–ê –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ 'a + b' (–≤–∞–∂–Ω—ã –ø—Ä–æ–±–µ–ª—ã), –∑–∞—Ç–µ–º —Ä–∞–∑–±–∏–≤–∞–µ—Ç –µ–≥–æ –Ω–∞ –º–∞—Å—Å–∏–≤ –∏–∑ 3 –∑–Ω–∞—á–µ–Ω–∏–π, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∏—Ö –≤ —Ü–∏—Ñ—Ä—ã –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –ª–µ–≥–∏—Ç–∏–º–Ω–æ—Å—Ç—å. –î–∞–ª–µ–µ –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ –ø–æ –æ—Å–Ω–æ–≤–∞–Ω–∏—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤.
    this.calculate = function(str) {
    let split = str.split(' '),
      a = +split[0],
      op = split[1],
      b = +split[2]
    if (!this.methods[op] || isNaN(a) || isNaN(b)) {
      return NaN;
    }
    return this.methods[op](a, b);
  }
  // –¥–æ–±–∞–≤–ª—è–µ—Ç  –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –≤ –æ–±—ä–µ–∫—Ç
  this.addMethod = function(name, func) {
    this.methods[name] = func;
  };
}
let calc = new Calculator;
let powerCalc = new Calculator;
console.log(calc.calculate('3 - 5'));
powerCalc.addMethod("*", (a, b) => a * b);
powerCalc.addMethod("/", (a, b) => a / b);
powerCalc.addMethod("**", (a, b) => a ** b);

let result = powerCalc.calculate("2 ** 7");
alert( result ); // 8


//  –ü–û–ò–°–ö –ó–ù–ê–ß–ï–ù–ò–ô –í –ú–ê–°–°–ò–í–ï –û–ë–™–ï–ö–¢–û–í
let vasya = { name: "–í–∞—Å—è", age: 25 };
let petya = { name: "–ü–µ—Ç—è", age: 30 };
let masha = { name: "–ú–∞—à–∞", age: 28 };
let users = [ vasya, petya, masha ];

let names = users.map(item => item.name);
alert( names ); // –í–∞—Å—è, –ü–µ—Ç—è, –ú–∞—à–∞
console.log(users);

//  –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ –æ–±—ä–µ–∫—Ç–æ–≤
let vasya = { name: "–í–∞—Å—è", surname: "–ü—É–ø–∫–∏–Ω", id: 1 };
let petya = { name: "–ü–µ—Ç—è", surname: "–ò–≤–∞–Ω–æ–≤", id: 2 };
let masha = { name: "–ú–∞—à–∞", surname: "–ü–µ—Ç—Ä–æ–≤–∞", id: 3 };
let users = [ vasya, petya, masha ];
// –ø–ª–æ—Ö–æ–π —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–±–æ—Ä–∞
// let usersMapped = users;  //  –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞
// for (let i = 0; i < 3; i++) {
//   usersMapped[i].fullName = usersMapped[i].name + ' ' + usersMapped[i].surname ;
//   delete usersMapped[i].name;
//   delete usersMapped[i].surname;
// }
let usersMapped = users.map(user => ({
  fullName: `${user.name} ${user.surname}`,
  id: user.id
}));

console.log(usersMapped);


// –°–û–†–¢–ò–†–û–í–ö–ê –ü–û –í–û–ó–†–ê–°–¢–£
let vasya = { name: "–í–∞—Å—è", age: 25 };
let petya = { name: "–ü–µ—Ç—è", age: 30 };
let masha = { name: "–ú–∞—à–∞", age: 28 };
let arr = [ vasya, petya, masha ];

arr.sort((a, b) => a - b);
arr.sort((a, b) => a.age - b.age);
console.log(arr);

// –ü–ï–†–ï–ú–ï–®–ò–í–ê–ù–ò–ï –ú–ê–°–°–ò–í–ê –°–õ–£–ß–ê–ô–ù–´–ú –û–ë–†–ê–ó–û–ú. –†–ï–ó–£–õ–¨–¢–ê–¢ –ù–ï –û–ß–ï–ù–¨
let arr = [1, 2, 3];
function shuffle(array){
return arr.sort((a,b) => Math.random() - Math.random());
}
shuffle(arr);
console.log (arr);


//–¢–ê–°–û–í–ê–ù–ò–ï –§–ò–®–ï–†–ê ‚Äî –ô–ï–¢–°–ê.
function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    let j = Math.floor(Math.random() * (i + 1)); // —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω–¥–µ–∫—Å –æ—Ç 0 –¥–æ i
    // –ø–æ–º–µ–Ω—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ—Å—Ç–∞–º–∏
    // –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å "–¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É—é—â–µ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ"
    // –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω—ë–º - –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≥–ª–∞–≤–∞—Ö
    // —Ç–æ –∂–µ —Å–∞–º–æ–µ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –∫–∞–∫:
    // let t = array[i]; array[i] = array[j]; array[j] = t
    [array[i], array[j]] = [array[j], array[i]];
  }
}

// –ü–û–î–°–ß–Å–¢ –í–ï–†–û–Ø–¢–ù–û–°–¢–ò –î–õ–Ø –í–°–ï–• –í–û–ó–ú–û–ñ–ù–´–• –í–ê–†–ò–ê–ù–¢–û–í
function shuffle(array) {
  array.sort(() => Math.random() - Math.random());
}
let count = {
  '123': 0,
  '132': 0,
  '213': 0,
  '231': 0,
  '321': 0,
  '312': 0
};
for (let i = 0; i < 1000000; i++) {
  let array = [1, 2, 3];
  shuffle(array);
  count[array.join('')]++;
}
console.log(count);

// –ü–û–ò–°–ö –°–†–ï–î–ù–ï–ì–û –í–û–ó–í–†–ê–°–¢–ê
let vasya = { name: "–í–∞—Å—è", age: 25 };
let petya = { name: "–ü–µ—Ç—è", age: 30 };
let masha = { name: "–ú–∞—à–∞", age: 29 };
let arr = [ vasya, petya, masha ];
console.log(arr);

function getAverageAge(array) {
// –¥–ª–∏–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±.
//   let sum = 0;
//   for (let i = 0; i < array.length; i++) {
// sum += +array[i].age;
//   }
//   return sum / array.length;
//}
return arr.reduce((accum, user) => accum + user.age, 0) / arr.length;
}
alert( getAverageAge(arr) ); // (25 + 30 + 29) / 3 = 28


// –ü–û–ò–°–ö –£–ù–ò–ö–ê–õ–¨–ù–´–• –°–¢–†–û–ö –í –ú–ê–°–°–ò–í–ï -----   –ü–û–ö–ê –ù–ï –†–ê–ë–û–¢–ê–ï–¢

function unique(strings) {
  //let arrayString = strings.split(', ');
let arrayString = [];
// arrayString = strings.map((item) => {
// if (!arrayString.includes(item)) {
//   arrayString.push(item);
// }
// return arrayString;
//   })
// return arrayString;
// }
arrayString = strings.filter(item => !arrayString.includes(item));
 return arrayString;
 }


let strings = ["–∫—Ä–∏—à–Ω–∞", "–∫—Ä–∏—à–Ω–∞", "—Ö–∞—Ä–µ", "—Ö–∞—Ä–µ",
  "—Ö–∞—Ä–µ", "—Ö–∞—Ä–µ", "–∫—Ä–∏—à–Ω–∞", "–∫—Ä–∏—à–Ω–∞", ":-O"
];

console.log(unique(strings));
//alert( unique(strings) ); // –∫—Ä–∏—à–Ω–∞, —Ö–∞—Ä–µ, :-O
